buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.6.10'
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.1"
    }
}

//plugins {
//    id 'application'
//}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.github.johnrengelman.shadow"
apply from: 'https://raw.githubusercontent.com/thedarkcolour/KotlinForForge/site/thedarkcolour/kotlinforforge/gradle/kff-3.1.0.gradle'

version = project.version
group = "possible_triangle.${project.modid}"
archivesBaseName = project.modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: project.mc_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=${project.modid}.mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                divide {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg "-mixin.config=${project.modid}.mixins.json"

            property 'forge.logging.console.level', 'debug'

            mods {
                divide {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${project.modid}.mixins.json"

            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                divide {
                    source sourceSets.main
                }
            }
        }

        all {
            lazyToken('minecraft_classpath') {
                // "C:/Users/nik/Desktop/Repos/Minecraft/Divide/build/libs/Divide-libs-1.0.0.jar"
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

configurations {
    library
    packedLibs
    implementation.extendsFrom library
    api.extendsFrom library
    library.exclude group: 'org.jetbrains', module: 'annotations'
}

afterEvaluate {
    configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
        dependencies.annotationProcessor([group: dep.moduleGroup, name: dep.moduleName, version: dep.moduleVersion])
    }
}

task mergeLibs(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.library.copyRecursive().resolve().collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

dependencies {
    library "io.ktor:ktor-server-core:${project.ktor_version}"
    library "io.ktor:ktor-server-netty:${project.ktor_version}"
    library "io.ktor:ktor-serialization:${project.ktor_version}"
    library "io.ktor:ktor-auth:$ktor_version"
    library "io.ktor:ktor-auth-jwt:$ktor_version"
    library "ch.qos.logback:logback-classic:${project.logback_version}"
    //library "io.ktor:ktor-utils-jvm:${project.ktor_version}"

    // Use the latest version of Minecraft Forge
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    library "com.charleskorn.kaml:kaml:0.38.0"

    //library files('build/libs/allLibs.jar')
}

mixin {
    add sourceSets.main, "${project.modid}.refmap.json"
}

shadowJar {
    from sourceSets.main.output

    archiveClassifier.set("obf")
    configurations = [project.configurations.library]

//    relocate('io.ktor', 'possible_triangle.io.ktor')

    //dependencies {
    //    include(dependency("com.charleskorn.kaml:kaml"))
    //}

    exclude("org/jetbrains/")
    exclude("org/intellij/")
    exclude("kotlin/")
    exclude("kotlinx/")
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : project.modid,
                'Specification-Vendor'    : "examplemodsareus",
                'Specification-Version'   : "1",
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : "examplemodsareus",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${project.modid}.mixins.json",
        ])
    }
}